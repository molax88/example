<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.hpb.contract.mapper.AuthRoleMapper">
  <resultMap id="BaseResultMap" type="io.hpb.contract.entity.AuthRole">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="role_desc" jdbcType="VARCHAR" property="roleDesc" />
    <result column="role_state" jdbcType="INTEGER" property="roleState" />
    <result column="create_at_time" jdbcType="TIMESTAMP" property="createAtTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, role_name, role_desc, role_state, create_at_time
  </sql>
  <select id="selectByExample" parameterType="io.hpb.contract.example.AuthRoleExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from auth_role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from auth_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from auth_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="io.hpb.contract.example.AuthRoleExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from auth_role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.hpb.contract.entity.AuthRole">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into auth_role (id, role_name, role_desc, 
      role_state, create_at_time)
    values (#{id,jdbcType=INTEGER}, #{roleName,jdbcType=VARCHAR}, #{roleDesc,jdbcType=VARCHAR}, 
      #{roleState,jdbcType=INTEGER}, #{createAtTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="io.hpb.contract.entity.AuthRole">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into auth_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="roleDesc != null">
        role_desc,
      </if>
      <if test="roleState != null">
        role_state,
      </if>
      <if test="createAtTime != null">
        create_at_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleDesc != null">
        #{roleDesc,jdbcType=VARCHAR},
      </if>
      <if test="roleState != null">
        #{roleState,jdbcType=INTEGER},
      </if>
      <if test="createAtTime != null">
        #{createAtTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.hpb.contract.example.AuthRoleExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from auth_role
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update auth_role
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.roleName != null">
        role_name = #{record.roleName,jdbcType=VARCHAR},
      </if>
      <if test="record.roleDesc != null">
        role_desc = #{record.roleDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.roleState != null">
        role_state = #{record.roleState,jdbcType=INTEGER},
      </if>
      <if test="record.createAtTime != null">
        create_at_time = #{record.createAtTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update auth_role
    set id = #{record.id,jdbcType=INTEGER},
      role_name = #{record.roleName,jdbcType=VARCHAR},
      role_desc = #{record.roleDesc,jdbcType=VARCHAR},
      role_state = #{record.roleState,jdbcType=INTEGER},
      create_at_time = #{record.createAtTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.hpb.contract.entity.AuthRole">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update auth_role
    <set>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="roleDesc != null">
        role_desc = #{roleDesc,jdbcType=VARCHAR},
      </if>
      <if test="roleState != null">
        role_state = #{roleState,jdbcType=INTEGER},
      </if>
      <if test="createAtTime != null">
        create_at_time = #{createAtTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.hpb.contract.entity.AuthRole">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update auth_role
    set role_name = #{roleName,jdbcType=VARCHAR},
      role_desc = #{roleDesc,jdbcType=VARCHAR},
      role_state = #{roleState,jdbcType=INTEGER},
      create_at_time = #{createAtTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <resultMap id="OwnerDetailInfoVo" type="io.hpb.contract.vo.OwnerDetailInfoVo">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="account_id" jdbcType="VARCHAR" property="accountId" />
    <result column="owner_id" jdbcType="VARCHAR" property="ownerId" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="create_at_time" jdbcType="TIMESTAMP" property="createAtTime" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="short_name" jdbcType="VARCHAR" property="shortName" />
    <result column="role_state" property="roleState" />
    <result column="role_id" property="roleId" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="full_name" jdbcType="VARCHAR" property="fullName" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="is_main" jdbcType="VARCHAR" property="isMain" />
    <result column="public_key" jdbcType="VARCHAR" property="publicKey" />
  </resultMap>
  <select id="selectByPage" parameterType="java.util.Map" resultMap="BaseResultMap">
	   SELECT 
	    	<include refid="Base_Column_List" />
	    FROM `auth_role`
	    <where> 
	   		 <if test="roleName != null and roleName !=''">
                 role_name LIKE CONCAT(CONCAT('%', #{roleName}), '%')
     		 </if>
     		 <if test="state != null and state !=''">
     		 	AND role_state = #{roleState}
     		 </if>
        </where>
        ORDER BY id DESC
        <!--<if test="pageSize != null and pageSize !='' and pageNum!=null and pageNum!=''">
            LIMIT #{pageNum},#{pageSize}
        </if>-->
   </select>
   <select id="count" parameterType="java.util.Map" resultType="java.lang.Long">
	    SELECT 
	    	count(1) 
	    FROM auth_role
	    <where> 
	   		 <if test="roleName != null and roleName !=''">
                 role_name LIKE CONCAT(CONCAT('%', #{roleName}), '%')
     		 </if>
        </where>
   </select>
   <update id="updateByCondition" parameterType="java.util.Map">
	  update auth_role
      set    role_name = #{roleName,jdbcType=VARCHAR},
     		 role_desc = #{roleDesc,jdbcType=VARCHAR},
     		 role_state = #{roleState,jdbcType=INTEGER},
     		 create_at_time = now()
     where id = #{id,jdbcType=INTEGER}
  </update>
    <insert id="insertByCondition" parameterType="java.util.Map">
	    insert into auth_role
	    <trim prefix="(" suffix=")" suffixOverrides=",">
	      <if test="id != null and id !='' ">
	        id,
	      </if>
	      <if test="roleName != null and roleName !='' ">
	        role_name,
	      </if>
	      <if test="roleDesc != null and roleDesc !='' ">
	        role_desc,
	      </if>
	      <if test="createAtTime != null ">
	        create_at_time,
	      </if>
	      <if test="roleState != null and roleState !='' ">
	        role_state
	      </if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides=",">
	      <if test="id != null and id !='' ">
	        #{id,jdbcType=INTEGER},
	      </if>
	       <if test="roleName != null and roleName !='' ">
	        #{roleName,jdbcType=VARCHAR},
	      </if>
	      <if test="roleDesc != null and roleDesc !='' ">
	        #{roleDesc,jdbcType=VARCHAR},
	      </if>
	      <if test="createAtTime != null">
	        now(),
	      </if>
	      <if test="roleState != null and roleState !='' ">
	        #{roleState,jdbcType=INTEGER},
	      </if>
	    </trim>
  </insert>
    <insert id="save" keyProperty="id" parameterType="io.hpb.contract.entity.AuthRole" useGeneratedKeys="true">
	    insert into auth_role
	    <trim prefix="(" suffix=")" suffixOverrides=",">
	      <if test="id != null and id !='' ">
	        id,
	      </if>
	      <if test="roleName != null and roleName !='' ">
	        role_name,
	      </if>
	      <if test="roleDesc != null and roleDesc !='' ">
	        role_desc,
	      </if>
	      <if test="createAtTime != null ">
	        create_at_time,
	      </if>
	      <if test="roleState != null and roleState !='' ">
	        role_state
	      </if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides=",">
	      <if test="id != null and id !='' ">
	        #{id,jdbcType=INTEGER},
	      </if>
	       <if test="roleName != null and roleName !='' ">
	        #{roleName,jdbcType=VARCHAR},
	      </if>
	      <if test="roleDesc != null and roleDesc !='' ">
	        #{roleDesc,jdbcType=VARCHAR},
	      </if>
	      <if test="createAtTime != null">
	        now(),
	      </if>
	      <if test="roleState != null and roleState !='' ">
	        #{roleState,jdbcType=INTEGER},
	      </if>
	    </trim>
  </insert>
  <select id="selectFullInfo" parameterType="java.util.Map" resultMap="OwnerDetailInfoVo">
	    SELECT 
		    odi.id as id,
		    abi.account_id as account_id,
		    abi.is_main as is_main,
		    odi.owner_id as owner_id,
		    odi.mobile as mobile,
		    odi.email as email,
		    odi.type as type,
		    odi.short_name as short_name,
		    odi.full_name as full_name,
		    odi.username as username,
		    odi.create_at_time as create_at_time,
		    odi.public_key as public_key,
		    ar.role_name as role_name,
		    ar.role_state as role_state,
		    ar.id as role_id,
		    obi.status as status
    	FROM owner_detail_info odi,auth_user_role aur,auth_role ar,account_base_info abi,owner_base_info obi
	    WHERE 
	    		odi.owner_id=aur.owner_id 
	    	AND aur.role_id=ar.id 
	    	AND abi.owner_id=odi.owner_id
	    	AND odi.owner_id = obi.owner_id
            <if test="username != null and username != ''">
                AND odi.username LIKE CONCAT(CONCAT('%', #{username}), '%')
            </if>
            <if test="mobile != null and mobile != ''">
                AND odi.mobile=#{mobile,jdbcType=VARCHAR}
            </if>
            <if test="isMain != null and isMain != ''">
                AND abi.is_main=#{isMain,jdbcType=VARCHAR}
            </if>
            <if test="status != null and status != ''">
                AND obi.status=#{status,jdbcType=VARCHAR}
            </if>
            <if test="start != null">
           		 AND odi.create_at_time &gt; #{start}
	        </if>
	        <if test="end != null">
	            AND odi.create_at_time &lt; #{end}
	        </if>
                ORDER BY odi.create_at_time DESC
            <if test="pageSize != null and pageSize !='' and pageNum!=null and pageNum!=''">
                LIMIT #{pageNum},#{pageSize}
            </if>
            
   </select>
</mapper>